/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Ip } from "./Ip";
import { IpCountArgs } from "./IpCountArgs";
import { IpFindManyArgs } from "./IpFindManyArgs";
import { IpFindUniqueArgs } from "./IpFindUniqueArgs";
import { CreateIpArgs } from "./CreateIpArgs";
import { UpdateIpArgs } from "./UpdateIpArgs";
import { DeleteIpArgs } from "./DeleteIpArgs";
import { Client } from "../../client/base/Client";
import { IpService } from "../ip.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Ip)
export class IpResolverBase {
  constructor(
    protected readonly service: IpService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ip",
    action: "read",
    possession: "any",
  })
  async _ipsMeta(@graphql.Args() args: IpCountArgs): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ip])
  @nestAccessControl.UseRoles({
    resource: "Ip",
    action: "read",
    possession: "any",
  })
  async ips(@graphql.Args() args: IpFindManyArgs): Promise<Ip[]> {
    return this.service.ips(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ip, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ip",
    action: "read",
    possession: "own",
  })
  async ip(@graphql.Args() args: IpFindUniqueArgs): Promise<Ip | null> {
    const result = await this.service.ip(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ip)
  @nestAccessControl.UseRoles({
    resource: "Ip",
    action: "create",
    possession: "any",
  })
  async createIp(@graphql.Args() args: CreateIpArgs): Promise<Ip> {
    return await this.service.createIp({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ip)
  @nestAccessControl.UseRoles({
    resource: "Ip",
    action: "update",
    possession: "any",
  })
  async updateIp(@graphql.Args() args: UpdateIpArgs): Promise<Ip | null> {
    try {
      return await this.service.updateIp({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ip)
  @nestAccessControl.UseRoles({
    resource: "Ip",
    action: "delete",
    possession: "any",
  })
  async deleteIp(@graphql.Args() args: DeleteIpArgs): Promise<Ip | null> {
    try {
      return await this.service.deleteIp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(@graphql.Parent() parent: Ip): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
