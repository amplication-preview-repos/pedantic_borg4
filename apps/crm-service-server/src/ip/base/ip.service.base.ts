/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Ip as PrismaIp, Client as PrismaClient } from "@prisma/client";

export class IpServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.IpCountArgs, "select">): Promise<number> {
    return this.prisma.ip.count(args);
  }

  async ips(args: Prisma.IpFindManyArgs): Promise<PrismaIp[]> {
    return this.prisma.ip.findMany(args);
  }
  async ip(args: Prisma.IpFindUniqueArgs): Promise<PrismaIp | null> {
    return this.prisma.ip.findUnique(args);
  }
  async createIp(args: Prisma.IpCreateArgs): Promise<PrismaIp> {
    return this.prisma.ip.create(args);
  }
  async updateIp(args: Prisma.IpUpdateArgs): Promise<PrismaIp> {
    return this.prisma.ip.update(args);
  }
  async deleteIp(args: Prisma.IpDeleteArgs): Promise<PrismaIp> {
    return this.prisma.ip.delete(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.ip
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }
}
