/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Vm } from "./Vm";
import { VmCountArgs } from "./VmCountArgs";
import { VmFindManyArgs } from "./VmFindManyArgs";
import { VmFindUniqueArgs } from "./VmFindUniqueArgs";
import { CreateVmArgs } from "./CreateVmArgs";
import { UpdateVmArgs } from "./UpdateVmArgs";
import { DeleteVmArgs } from "./DeleteVmArgs";
import { Client } from "../../client/base/Client";
import { VmService } from "../vm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Vm)
export class VmResolverBase {
  constructor(
    protected readonly service: VmService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Vm",
    action: "read",
    possession: "any",
  })
  async _vmsMeta(@graphql.Args() args: VmCountArgs): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Vm])
  @nestAccessControl.UseRoles({
    resource: "Vm",
    action: "read",
    possession: "any",
  })
  async vms(@graphql.Args() args: VmFindManyArgs): Promise<Vm[]> {
    return this.service.vms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Vm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Vm",
    action: "read",
    possession: "own",
  })
  async vm(@graphql.Args() args: VmFindUniqueArgs): Promise<Vm | null> {
    const result = await this.service.vm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vm)
  @nestAccessControl.UseRoles({
    resource: "Vm",
    action: "create",
    possession: "any",
  })
  async createVm(@graphql.Args() args: CreateVmArgs): Promise<Vm> {
    return await this.service.createVm({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Vm)
  @nestAccessControl.UseRoles({
    resource: "Vm",
    action: "update",
    possession: "any",
  })
  async updateVm(@graphql.Args() args: UpdateVmArgs): Promise<Vm | null> {
    try {
      return await this.service.updateVm({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Vm)
  @nestAccessControl.UseRoles({
    resource: "Vm",
    action: "delete",
    possession: "any",
  })
  async deleteVm(@graphql.Args() args: DeleteVmArgs): Promise<Vm | null> {
    try {
      return await this.service.deleteVm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(@graphql.Parent() parent: Vm): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
