/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Vm as PrismaVm, Client as PrismaClient } from "@prisma/client";

export class VmServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VmCountArgs, "select">): Promise<number> {
    return this.prisma.vm.count(args);
  }

  async vms(args: Prisma.VmFindManyArgs): Promise<PrismaVm[]> {
    return this.prisma.vm.findMany(args);
  }
  async vm(args: Prisma.VmFindUniqueArgs): Promise<PrismaVm | null> {
    return this.prisma.vm.findUnique(args);
  }
  async createVm(args: Prisma.VmCreateArgs): Promise<PrismaVm> {
    return this.prisma.vm.create(args);
  }
  async updateVm(args: Prisma.VmUpdateArgs): Promise<PrismaVm> {
    return this.prisma.vm.update(args);
  }
  async deleteVm(args: Prisma.VmDeleteArgs): Promise<PrismaVm> {
    return this.prisma.vm.delete(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.vm
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }
}
